// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Ankur Kumar",
            "url": "https://github.com/sirjager"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Welcome",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Welcome",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/WelcomeResponse"
                        }
                    }
                }
            }
        },
        "/SysHealth": {
            "get": {
                "description": "Health Check",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Health",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/HealthResponse"
                        }
                    }
                }
            }
        },
        "/auth/signin": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Signin using email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Signin",
                "parameters": [
                    {
                        "type": "boolean",
                        "description": "If true, returns User in body",
                        "name": "user",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "If true, returns AccessToken, RefreshToken and SessionID in body",
                        "name": "cookies",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "SignInResponse",
                        "schema": {
                            "$ref": "#/definitions/SignInResponse"
                        }
                    }
                }
            }
        },
        "/auth/signout/{provider}": {
            "get": {
                "description": "Signout from a provider",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Signout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider Name",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Signup using email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Signup",
                "parameters": [
                    {
                        "description": "Signup request params",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SignUpRequestParams"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User object",
                        "schema": {
                            "$ref": "#/definitions/UserResponse"
                        }
                    }
                }
            }
        },
        "/auth/user": {
            "get": {
                "description": "Returns Authenticated User",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User",
                "responses": {
                    "200": {
                        "description": "UserResponse",
                        "schema": {
                            "$ref": "#/definitions/UserResponse"
                        }
                    }
                }
            }
        },
        "/auth/{provider}": {
            "get": {
                "description": "Authenticates a user with a specified provider",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Provider Name",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User object",
                        "schema": {
                            "$ref": "#/definitions/UserResponse"
                        }
                    }
                }
            }
        },
        "/swagger": {
            "get": {
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "System"
                ],
                "summary": "Documentation",
                "responses": {
                    "200": {
                        "description": "HTML content",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Fetch multiple users",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Multiple Users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number: Default 1",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Per Page: Default 100",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UsersResponse",
                        "schema": {
                            "$ref": "#/definitions/UsersResponse"
                        }
                    }
                }
            }
        },
        "/users/{identity}": {
            "get": {
                "description": "Fetch specific user",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Single User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Identity can either be email or id",
                        "name": "identity",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UserResponse",
                        "schema": {
                            "$ref": "#/definitions/UserResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Partially Update User",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Update User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Identity can either be email or id",
                        "name": "identity",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update User Params",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateUserParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UserResponse",
                        "schema": {
                            "$ref": "#/definitions/UserResponse"
                        }
                    }
                }
            },
            "patch": {
                "description": "Partially Update User",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resources"
                ],
                "summary": "Update User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Identity can either be email or id",
                        "name": "identity",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update User Params",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UserUpdateParams"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Response",
                        "schema": {
                            "$ref": "#/definitions/UserResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "HealthResponse": {
            "type": "object",
            "properties": {
                "server": {
                    "type": "string"
                },
                "service": {
                    "type": "string"
                },
                "started": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "uptime": {
                    "type": "string"
                }
            }
        },
        "SignInResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "session_id": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/User"
                }
            }
        },
        "SignUpRequestParams": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "UpdateUserParams": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string",
                    "maxLength": 30
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 30
                },
                "name": {
                    "type": "string",
                    "maxLength": 100
                },
                "picture_url": {
                    "type": "string"
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "blocked": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "picture_url": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "verified": {
                    "type": "boolean"
                }
            }
        },
        "UserResponse": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/User"
                }
            }
        },
        "UserUpdateParams": {
            "type": "object",
            "properties": {
                "first_name": {
                    "type": "string",
                    "maxLength": 30
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 30
                },
                "name": {
                    "type": "string",
                    "maxLength": 100
                },
                "picture_url": {
                    "type": "string"
                }
            }
        },
        "UsersResponse": {
            "type": "object",
            "properties": {
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/User"
                    }
                }
            }
        },
        "WelcomeResponse": {
            "type": "object",
            "properties": {
                "docs": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "OAuthAPI",
	Description:      "OAuth API for 3rd party authentication",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __000001_init_db_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xe5\x72\x09\xf2\x0f\x50\x70\x0b\xf5\x73\x0e\xf1\xf4\xf7\x53\x48\xcb\x8b\x2f\x2d\x48\x49\x2c\x49\x8d\x2f\xc9\xcc\x4d\x2d\x2e\x49\xcc\x2d\xb0\xe6\x02\x04\x00\x00\xff\xff\x77\x3e\x8a\xb9\x26\x00\x00\x00")

func _000001_init_db_down_sql() ([]byte, error) {
	return bindata_read(
		__000001_init_db_down_sql,
		"000001_init_db.down.sql",
	)
}

var __000001_init_db_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcd\xc1\x8a\xb3\x40\x10\x04\xe0\xf3\xf4\x53\x14\xc1\x43\x12\xf8\xf3\x02\xc3\x7f\x70\xb5\x75\x1b\xb2\x3d\xcb\x4c\x87\xe4\x26\x82\xae\x04\x4c\xd6\x45\x7d\xff\x45\xb2\xc7\x82\xfa\xaa\x8a\xc8\xb9\x31\xf8\x66\xac\x49\x82\x42\x2a\x68\x30\xf0\x4d\x92\x25\xec\xd6\xf5\xde\xfd\xfb\x9e\xe7\x69\xe7\x89\xfe\xca\x21\x22\xf2\xe7\x39\x2f\x18\xd5\x45\x0b\xdb\xd8\xd7\xb3\x59\xa7\xae\x5d\xfa\x66\xb9\x3f\xfa\x79\x69\x1f\xd3\xfe\x40\x91\xed\x12\x35\xc1\xa2\xd4\x35\x47\xe4\x09\x59\x46\x6f\x5c\x8b\x92\x93\x0a\xe1\x5c\x9e\x8e\x90\x84\x52\x92\x89\x16\x86\x2a\x86\x0f\x28\x5f\x4f\x47\xd8\x3b\x2b\x39\xe7\xdc\x16\x5f\xe3\x5d\xd3\x2e\xf8\x0f\x0d\xd7\xfd\xc1\x83\x1c\x6b\x09\xa9\x3c\xb9\xd7\xd1\x06\x3d\xb1\x96\x9e\xb2\x0c\x63\xfb\x1c\xd6\x76\xe8\x31\x8d\xd3\x30\xff\x8c\xf0\xf4\x1b\x00\x00\xff\xff\x93\xbe\xf0\xf8\xee\x00\x00\x00")

func _000001_init_db_up_sql() ([]byte, error) {
	return bindata_read(
		__000001_init_db_up_sql,
		"000001_init_db.up.sql",
	)
}

var __000002_users_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x50\x2a\x2d\x4e\x2d\x2a\x56\xb2\xe6\x02\x04\x00\x00\xff\xff\xb3\x49\x9e\xd5\x1e\x00\x00\x00")

func _000002_users_down_sql() ([]byte, error) {
	return bindata_read(
		__000002_users_down_sql,
		"000002_users.down.sql",
	)
}

var __000002_users_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x4d\x8f\xda\x30\x10\x86\xef\xf9\x15\x23\x5f\x36\x91\x56\x7b\xa8\xb4\xa7\x55\x0f\x26\x99\x2c\x51\x83\x4d\x5d\xbb\xb0\xbd\x44\x6e\xe2\x20\x8b\x7c\x20\xc7\xd0\xbf\x5f\x99\x7e\x80\x8a\xba\xc0\x79\x9e\xe7\x7d\x67\xa4\x49\x05\x52\x89\x20\xe9\xac\x44\x20\xfb\xc9\xb8\x89\x40\x1c\x01\x10\xdb\x10\x50\xaa\xc8\x60\x29\x8a\x05\x15\x6f\xf0\x09\xdf\x1e\xa3\x30\x31\xbd\xb6\x1d\x81\xaf\x54\xa4\x73\x2a\xe2\x0f\xcf\xcf\x09\x28\x56\x7c\x56\x08\x8c\x4b\x60\xaa\x2c\x1f\x03\x77\x30\xce\xb6\xd6\x34\x04\x66\x9c\x97\x7f\x67\x90\x61\x4e\x55\x29\xa1\xd5\xdd\x64\x8e\xe4\xf7\x6e\xac\xb7\x57\xc1\x40\xee\xdc\x78\xb0\x8d\x71\xff\xd4\x5f\x28\x0f\x0f\xc7\xe0\xcd\x38\x6e\x3a\x53\x85\x5b\xae\xf3\x41\x18\x74\x6f\x6e\xcc\x6e\xad\x9b\x7c\x75\x87\xd0\xe9\xfb\xf8\xc1\xd6\xdb\x9b\xf9\x20\xe8\x83\xf6\xda\x55\x7b\xd7\x11\x90\xb8\x96\xff\xdf\x64\xac\xb5\xb7\xe3\xf0\x1e\x16\xb8\xda\x19\xed\x4d\x53\x69\x4f\x40\x16\x0b\xfc\x22\xe9\x62\x29\xbf\x5d\x0a\xf1\x30\xfe\x88\x93\xe4\x18\xbe\xdf\x35\x77\x49\x51\xf2\x12\x45\xbf\xff\xb0\x60\x19\xae\x81\xb3\xd3\x2b\x9e\xef\x70\x06\x4a\x51\xbc\xbe\xa2\x00\xef\x36\xd5\xaf\xc2\xea\xd4\x0b\x33\xcc\xb9\x40\x50\xcb\x2c\xb0\xa7\xb8\x28\xe7\x02\x90\xa6\x73\x10\x7c\x05\xab\x39\x32\x88\x79\x99\x3d\xd9\x06\x3e\x02\xc3\xd5\x93\x6d\x12\xc0\x35\xa6\x4a\x22\xe4\x8a\xa5\xb2\xe0\x0c\xda\xe1\x4f\x85\xb7\xbd\x99\xbc\xee\x77\x71\xf2\x12\xfd\x0c\x00\x00\xff\xff\xe5\x32\x4f\x32\x3b\x03\x00\x00")

func _000002_users_up_sql() ([]byte, error) {
	return bindata_read(
		__000002_users_up_sql,
		"000002_users.up.sql",
	)
}

var _bindata_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func bindata_go() ([]byte, error) {
	return bindata_read(
		_bindata_go,
		"bindata.go",
	)
}

var _migrate_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x4f\xe4\x38\x10\x3d\xc7\xbf\xa2\x36\xa7\x44\x6a\xe2\xcb\x9e\x7a\xc5\x61\xc5\x80\x84\x04\x1c\x7a\xd4\x9a\x23\x38\x49\xb5\x53\x43\x62\x67\xca\x0e\x2d\x84\xf8\xef\x23\xe7\xbb\x01\x8d\x60\x4e\x40\xca\xef\xa3\x9e\x9f\x69\x55\xf1\xa8\x34\x42\x43\x9a\x95\x27\x6b\x9c\x10\xd4\xb4\x96\x3d\x24\x22\x8a\x35\xf9\xaa\xcb\xb3\xc2\x36\x52\xdb\x5a\x19\x7d\x36\x1c\x44\x39\xfd\x7c\xfa\x37\x16\xd1\x3d\x7c\xea\xa4\x2c\x95\x57\xb9\x72\xf8\x17\x10\xd9\x5a\xe7\x35\xa3\xfb\x02\xd6\xd9\x8e\x0b\x94\x07\xaa\x83\x62\x4e\x26\x90\x7d\x0d\xab\xed\xfd\x88\x7b\xa7\x5b\x53\x2e\xdb\x5f\xb1\x48\x85\x90\x12\x6e\x07\xe8\xde\x21\xbb\x1d\xb6\x16\x54\xdb\xd6\x84\x0e\xa6\x05\x56\x11\x43\xe7\xc8\x68\xf0\x15\xc2\x83\xb6\x67\xa3\xc0\x03\x4c\x97\xa1\x5c\x3f\x1b\x2c\x40\xc9\xf4\x84\x9c\x05\x91\x6b\x0f\x05\xa3\xf2\xe8\x40\x2d\x7c\xd3\xc1\x85\x35\x27\xa3\xf8\xb9\x97\x06\x8d\x06\x83\xb3\x12\xf2\xe7\x41\x72\x31\x32\x4b\x6e\x40\x99\x32\x4c\x4d\x90\x59\x34\x0c\x1e\x47\x1d\x04\x32\xce\x2b\x53\x20\x1c\xc9\x57\xef\xcd\x9f\xb8\x9d\xe8\xa0\x65\xfb\x44\x25\x96\x4b\x0c\xfb\xdd\x4d\x06\xd7\x3e\xe8\x04\xbd\x39\x27\x65\x9e\xa1\x45\x53\x86\x1d\x56\x51\x79\xdb\xf3\xcc\xf0\x40\x5c\x5b\x3d\x24\xc4\xe8\xba\xda\x87\x68\x02\xdd\xde\x29\x8d\xdb\xf0\xdb\xd8\xe0\xf5\x6d\x75\x0e\xd9\xa8\x06\x25\x63\x6b\xe5\x22\x10\x03\x48\x09\xad\x0a\x2b\xd9\x55\x58\xcb\x6a\x03\x7b\x44\x07\x40\x66\x38\x9f\xad\x64\x6f\xaf\x3c\x59\x58\xb3\xff\x9d\x43\x7f\xa7\x1a\x74\x49\xba\x81\xb7\x83\xf4\xbf\x9e\xeb\x9f\x73\x30\x54\xc3\x4b\xa0\x8f\x6a\xab\x39\xbb\x52\x5e\xd5\x49\x9a\x5d\x32\x27\xc8\x9c\x66\xb7\x4e\x27\xf1\x41\x51\x8d\x65\xf0\x37\xdd\xc5\xfc\x90\xd2\x80\x7d\x1d\x03\xb8\xb2\x0c\x3b\x3c\x20\xa3\x29\x70\x0b\x95\xf7\xad\xdb\x4a\xb9\x4a\xc1\x11\xff\x54\x1a\x59\x7a\xee\x50\x75\xbe\x92\x79\x6d\x73\xd9\x28\xe7\x91\x65\xa3\xc8\x64\xda\x8a\x43\x67\x8a\x77\x85\x4e\xa6\x07\xb8\xdf\xdd\x80\xf3\x4c\x46\xa7\x10\x4c\x86\x55\x2c\xa7\xf0\x22\x22\x29\x57\xad\x5c\x95\x50\x44\xf3\xe7\xef\x43\x4d\xb6\xe7\x30\xc6\x9b\xed\x70\xa8\x4e\x72\x9a\xd9\x10\x94\x88\x86\xe1\xb7\xbe\x56\x9b\x3e\xb6\x15\xf6\x07\xf9\xea\x7a\xec\x65\xf2\x46\x23\x15\xd3\x9d\xcd\x39\x47\x11\xa3\xef\xd8\x84\xaf\x22\x7a\x15\x22\x2a\xf3\x31\xd2\x99\x7a\xfc\x3b\xbb\xc3\x63\x60\x1f\xb8\x66\x8d\x78\xe9\x45\xbc\x81\x53\x6f\xab\x80\x3e\xa1\x1d\x8d\x6d\x9a\x0c\x64\xfb\x36\xf9\x10\x26\x25\x5c\x54\x58\x3c\x02\x1d\xfa\xd2\xf7\x71\x03\x39\x88\x8d\x85\xa2\x52\x46\x63\x0c\xc7\x8a\x8a\x0a\xc8\x94\x54\xf4\x4f\xd7\x57\xca\x87\xd3\x8c\xa0\x18\xc1\xd8\x0f\xde\x56\x36\x90\xdf\x58\x0d\xca\x00\x99\x83\x85\x06\x5d\x78\x44\x40\x06\x7c\x45\x0e\x8a\xd0\x73\x11\xad\x5c\x4d\x6e\x2f\x99\xef\xec\x45\xaf\xde\xbb\x3c\xd9\x2e\xac\x17\xa8\x8d\x5d\xdc\x0e\x73\x2c\xc7\x35\xfe\x64\x6c\x00\x3b\x0b\xe4\xc3\x3f\x21\xd7\x15\x05\x3a\x07\x85\x35\x25\x85\x03\xc3\xbc\xb6\x1a\x9c\x6d\xd0\x57\x01\x1d\x18\xfb\x58\x47\x1f\x86\x6a\xf1\x2a\x7e\x07\x00\x00\xff\xff\x2b\x1e\x35\xcc\xdf\x06\x00\x00")

func migrate_go() ([]byte, error) {
	return bindata_read(
		_migrate_go,
		"migrate.go",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"000001_init_db.down.sql": _000001_init_db_down_sql,
	"000001_init_db.up.sql": _000001_init_db_up_sql,
	"000002_users.down.sql": _000002_users_down_sql,
	"000002_users.up.sql": _000002_users_up_sql,
	"bindata.go": bindata_go,
	"migrate.go": migrate_go,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"000001_init_db.down.sql": &_bintree_t{_000001_init_db_down_sql, map[string]*_bintree_t{
	}},
	"000001_init_db.up.sql": &_bintree_t{_000001_init_db_up_sql, map[string]*_bintree_t{
	}},
	"000002_users.down.sql": &_bintree_t{_000002_users_down_sql, map[string]*_bintree_t{
	}},
	"000002_users.up.sql": &_bintree_t{_000002_users_up_sql, map[string]*_bintree_t{
	}},
	"bindata.go": &_bintree_t{bindata_go, map[string]*_bintree_t{
	}},
	"migrate.go": &_bintree_t{migrate_go, map[string]*_bintree_t{
	}},
}}

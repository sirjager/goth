package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __000001_init_db_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xe5\x72\x09\xf2\x0f\x50\x70\x0b\xf5\x73\x0e\xf1\xf4\xf7\x53\x48\xcb\x8b\x2f\x2d\x48\x49\x2c\x49\x8d\x2f\xc9\xcc\x4d\x2d\x2e\x49\xcc\x2d\xb0\xe6\x02\x04\x00\x00\xff\xff\x77\x3e\x8a\xb9\x26\x00\x00\x00")

func _000001_init_db_down_sql() ([]byte, error) {
	return bindata_read(
		__000001_init_db_down_sql,
		"000001_init_db.down.sql",
	)
}

var __000001_init_db_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcd\xc1\x8a\xb3\x40\x10\x04\xe0\xf3\xf4\x53\x14\xc1\x43\x12\xf8\xf3\x02\xc3\x7f\x70\xb5\x75\x1b\xb2\x3d\xcb\x4c\x87\xe4\x26\x82\xae\x04\x4c\xd6\x45\x7d\xff\x45\xb2\xc7\x82\xfa\xaa\x8a\xc8\xb9\x31\xf8\x66\xac\x49\x82\x42\x2a\x68\x30\xf0\x4d\x92\x25\xec\xd6\xf5\xde\xfd\xfb\x9e\xe7\x69\xe7\x89\xfe\xca\x21\x22\xf2\xe7\x39\x2f\x18\xd5\x45\x0b\xdb\xd8\xd7\xb3\x59\xa7\xae\x5d\xfa\x66\xb9\x3f\xfa\x79\x69\x1f\xd3\xfe\x40\x91\xed\x12\x35\xc1\xa2\xd4\x35\x47\xe4\x09\x59\x46\x6f\x5c\x8b\x92\x93\x0a\xe1\x5c\x9e\x8e\x90\x84\x52\x92\x89\x16\x86\x2a\x86\x0f\x28\x5f\x4f\x47\xd8\x3b\x2b\x39\xe7\xdc\x16\x5f\xe3\x5d\xd3\x2e\xf8\x0f\x0d\xd7\xfd\xc1\x83\x1c\x6b\x09\xa9\x3c\xb9\xd7\xd1\x06\x3d\xb1\x96\x9e\xb2\x0c\x63\xfb\x1c\xd6\x76\xe8\x31\x8d\xd3\x30\xff\x8c\xf0\xf4\x1b\x00\x00\xff\xff\x93\xbe\xf0\xf8\xee\x00\x00\x00")

func _000001_init_db_up_sql() ([]byte, error) {
	return bindata_read(
		__000001_init_db_up_sql,
		"000001_init_db.up.sql",
	)
}

var __000002_users_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x50\x2a\x2d\x4e\x2d\x2a\x56\xb2\xe6\x02\x04\x00\x00\xff\xff\xb3\x49\x9e\xd5\x1e\x00\x00\x00")

func _000002_users_down_sql() ([]byte, error) {
	return bindata_read(
		__000002_users_down_sql,
		"000002_users.down.sql",
	)
}

var __000002_users_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\xcd\x6e\xdb\x3a\x10\x85\xf7\x7a\x8a\x01\x37\x91\x00\x23\x8b\x8b\x9b\x55\x90\x85\x2c\x8f\x62\x21\x32\xe5\x32\x64\xed\x74\x43\xb0\x12\x6d\x10\xd1\x8f\x41\x51\x2e\xfa\xf6\x05\x2d\x3b\x0e\x9a\xb6\xb1\xb7\xd2\x77\xbe\xe1\x01\x87\x09\xc3\x98\x23\xf0\x78\x9a\x23\x90\xa1\xd7\xb6\x27\x10\x06\x00\xc4\x54\x04\x84\xc8\x66\xb0\x64\xd9\x22\x66\x2f\xf0\x84\x2f\x30\xc3\x34\x16\x39\x87\x70\x18\x4c\x25\xb7\xba\xd5\x56\x39\x2d\xf7\xff\x87\x51\x34\x09\x7c\x4c\x37\xca\xd4\x04\xbe\xc6\x2c\x99\xc7\x2c\xfc\xef\xee\x2e\x02\x41\xb3\x2f\x02\x81\x16\x1c\xa8\xc8\xf3\x89\xe7\xf6\xda\x9a\x8d\xd1\x15\x81\x69\x51\xe4\x6f\xff\xde\x26\x6c\x54\xdd\xeb\x03\xf9\xbd\xee\xca\xd7\x4f\x41\x4f\xee\x6c\xb7\x37\x95\xb6\xbf\x8d\xff\x10\xb9\xb9\x39\x88\xb7\x5d\xb7\xad\xb5\xf4\x45\x3f\xe7\x7d\xa0\x55\x8d\xbe\xd0\xbd\x31\xb6\x77\xf2\x8a\x40\xad\xae\xe3\x5b\x53\xbe\x5e\xcc\xfb\x80\xda\x2b\xa7\xac\x1c\x6c\x4d\x80\xe3\x9a\xff\xd5\xbc\x33\xa5\x1b\xac\xbe\x80\xac\xbb\x52\x39\xd3\xb5\xff\xc2\x3c\xd7\xa8\xde\xf9\x5b\xf9\xf3\x05\xa6\x71\xfe\x8c\xde\x97\xcc\x31\x79\x82\x70\xa4\x21\xa3\x10\x72\x26\x70\x32\x02\xa7\xfd\x2a\xad\x56\x4e\x57\x52\x39\x02\x3c\x5b\xe0\x33\x8f\x17\x4b\xfe\xed\xa3\x36\x6c\xbb\x1f\x87\xad\x04\x20\xc3\xae\xba\x2a\x14\x44\xf7\x41\x10\x1c\xdf\x46\x46\x67\xb8\x86\x82\x9e\x9f\xc7\xfb\x43\x78\xf2\x08\x1e\xd7\x7c\xe4\x49\xd7\xd6\x3f\x65\xd7\x6a\x79\x6a\xff\xde\x30\x7e\x8b\x60\x35\x47\x86\x70\x6c\xfc\x00\xbe\xef\xd9\xc7\x59\xf6\xf8\x88\x0c\x9c\xdd\xca\xb1\x81\x3c\x17\x81\x29\xa6\x05\x43\x10\xcb\x99\x67\xcf\xf2\x20\x2d\x18\x60\x9c\xcc\x81\x15\x2b\x3f\x80\x42\x58\xe4\xb3\x5b\x53\xc1\x03\x50\x5c\xdd\x9a\x2a\x02\x5c\x63\x22\x38\x42\x2a\x68\xc2\xb3\x82\xc2\xa6\x3d\x8d\x70\xa6\xd1\xbd\x53\xcd\x2e\x8c\xee\x83\x5f\x01\x00\x00\xff\xff\xb0\xcb\x8c\xa3\x1f\x04\x00\x00")

func _000002_users_up_sql() ([]byte, error) {
	return bindata_read(
		__000002_users_up_sql,
		"000002_users.up.sql",
	)
}

var _bindata_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\x5b\x6f\xe3\xc8\x11\x85\x9f\xc5\x5f\xc1\x08\xd8\x40\x02\x0c\x87\x77\x36\x17\xf0\xcb\x2e\xf2\x9a\x87\xbc\xa6\x02\xa1\x49\x76\x1b\x42\x6c\xc9\xa3\xcb\x6e\xed\x04\xfb\xdf\x83\x8f\xd5\x82\x3d\x03\x7b\x10\xec\xac\x01\x99\x64\x5f\xab\xea\x9c\x3a\x55\x2f\x7e\xfa\x8f\x7f\x0c\xf9\xf3\xfe\xf1\xe4\x2f\xfb\xe3\xe1\x9c\x65\xfb\xe7\x97\xe3\xe9\x92\x6f\xb2\xd5\x7a\xfc\xed\x12\xce\xeb\x6c\xb5\x9e\x8e\xcf\x2f\xa7\x70\x3e\xff\xed\xf1\xf3\xfe\x85\x81\xf8\x7c\xe1\xb1\x3f\xf2\xff\x7c\x39\xed\x0f\x8f\xe7\x75\xb6\xcd\xb2\x78\x3d\x4c\xf9\xb8\x3f\xcc\xfe\xe2\x77\xa7\xe0\xe7\x0d\x6f\xf9\xbf\xfe\xcd\x59\x77\xf9\xc1\x3f\x87\xdc\xd6\x6f\xf3\xcd\x6d\x34\x9c\x4e\xc7\xd3\x36\xff\x6f\xb6\x7a\xfc\xbc\x7c\xe5\x3f\x3e\xe4\x5c\x75\xff\x8f\xf0\xeb\x3f\x83\x9f\xc3\x69\xb3\xd8\xc2\xf7\x4f\xd7\x18\xc3\x69\x39\x76\xbb\xcd\x56\xfb\xb8\x6c\xf8\xcb\x43\x7e\xd8\x3f\x71\xc4\xea\x14\x2e\xd7\xd3\x81\xcf\xbb\x3c\x3e\x5f\xee\xff\xce\xe9\x71\xb3\xe6\xa0\xfc\x87\x4f\x3f\xe6\x3f\xfc\xb2\x36\x4b\x96\xbb\xb6\xd9\xea\xf7\x2c\x5b\xfd\xe2\x4f\xf9\x78\x8d\xb9\xdd\x63\x97\x64\xab\x9d\x99\xf3\x90\xef\x8f\xf7\x3f\x1f\x5f\x7e\xdb\xfc\x75\xbc\xc6\xbb\xfc\xf1\xf3\x16\x5b\xef\x7f\x7e\x3a\x9e\xc3\x66\x9b\xfd\x79\x66\xa4\x5d\xe3\x35\xde\xff\x84\x25\x9b\xed\x1d\x47\x64\xbf\x67\x19\x16\xee\x76\x05\x7f\xe5\x6e\x7f\xd8\x5f\x76\xf3\xb8\x9b\x8f\xbf\x1e\x76\xe7\x4f\x4f\xf9\x43\x8a\xf1\x66\x2d\x5a\x46\x51\x37\x8a\x16\x4e\xb4\x28\xde\xff\xc5\x28\x3a\x57\xa2\x73\x2b\x1a\x5a\xd1\xbe\x12\x2d\x06\xd1\xc8\x33\x8a\xb6\x85\x68\xcf\xda\x51\x34\x32\x5f\x8b\x16\x41\x34\x96\xa2\xb1\x11\x8d\xbd\x68\x5b\x8b\x36\x4e\x74\x1a\xed\xbe\x2a\x8a\x56\xb3\x8d\x35\x83\x68\x35\xd9\xd3\xcd\x36\x37\x0d\xa2\x13\x63\xb3\xad\xab\x82\xcd\x33\xc6\xf7\x58\x88\x86\x4e\xb4\xc0\x86\xe6\x4b\x5b\xf9\xf5\xbd\x68\x1d\x44\x9d\x17\x1d\x39\xbf\x7b\xeb\xd3\xfa\x46\xbf\x8f\x62\xb4\x79\x97\x72\xb7\x88\xbf\xe5\x6c\xb6\x5a\x7d\x18\xe9\xbb\x6c\xb5\x5a\x7f\x39\x77\xcf\xdc\xfd\xf9\xd3\xd3\xfa\x2e\x5b\x6d\x3f\xc4\xea\xfa\xf2\x87\x91\x22\x92\xd3\x2c\x3a\x95\xc9\x7b\x22\x5f\x88\x96\x85\x45\x2a\xb0\xae\x36\x64\x40\xa5\x6c\x6c\x6d\xc3\x7b\x25\x1a\x9d\xcd\x13\xd9\xa9\x16\xed\xa3\xa1\x3b\x82\x6c\x2b\x5a\x8e\xa2\x63\x25\x5a\xcf\x86\x66\x33\x89\xba\x5e\x34\x34\x16\x65\x57\x89\xfa\x60\x77\x31\x37\x77\xa2\x0d\x7b\x67\xb3\x8f\x77\xf6\x4f\xbd\xad\x8d\x5e\xd4\x7b\xb3\x75\x72\x86\x56\x5d\x9a\x1d\x5d\x27\xea\x6f\xcc\xa8\x44\x9b\x4a\xb4\xf2\xa2\x9d\x13\xad\xf1\xa3\x30\x86\x0c\x8c\xc3\xce\x74\x1f\x2c\x9c\x61\x20\x77\x8e\xa2\x43\x10\x0d\xbd\x68\x37\xd8\xd3\xc1\xde\x20\x3a\x79\xd1\xaa\x14\xad\x2a\x63\x33\x73\xf5\x60\x0c\x2c\x9d\x31\x1e\x7b\x61\xf6\xcc\x8f\xb1\xde\x62\xda\x0e\xa2\xbe\x37\x5f\xdb\xd9\xfc\xc0\xde\xc5\xfe\x68\xdf\xfd\x60\x77\x82\xdd\x5c\xdb\x9d\x60\x31\x94\xa2\x61\xb6\x78\xd7\xad\xc5\xdf\x93\x61\x8d\x7d\x37\x29\x9e\x64\x19\xf7\x34\x9d\x68\x47\xa6\x4d\xc6\x01\xfc\x1d\xc0\xc8\x8b\x86\xd2\xc6\xf1\xd1\x05\xd1\xa1\x10\x75\x60\x5b\xd9\x3a\x7c\x2d\xc1\xa5\xb3\xd8\xf1\x24\x6b\x2b\x27\xda\x82\x47\xb4\xfb\xf0\xad\x26\x33\x47\x8b\x01\xb1\x98\x27\xdb\xcb\xba\x50\x9b\x9f\xf8\x41\x36\x82\x0f\xe7\x14\xb3\xc5\x24\xde\x38\x07\x8f\x26\xd1\x6e\x34\xfb\x3d\xf1\x98\x2c\x2e\xac\x9b\x4b\xd1\xa2\x33\xfe\x8c\xa5\xe8\xd0\x99\xed\x70\xa2\x60\x5f\x6d\x98\x95\x09\xcb\xbe\x13\x0d\xce\x38\xe1\xd2\xfd\x75\xe2\xba\x9b\x8c\x03\x70\x19\x5e\x7e\xad\x02\xc4\x68\x0c\x69\x8d\x13\x0d\xe1\xff\x52\x01\xcb\xbe\xef\xd3\x00\x3b\xe3\x3d\x05\xb8\xbe\x7c\x94\xff\xd5\xee\x7a\x0e\xa7\xf3\xf7\x29\xf5\x7b\xea\xcc\x9e\xbe\x14\xed\x1b\x1b\xe7\xbd\x6d\x2d\x2e\x7d\xd2\x01\x72\x9c\xf8\x32\x06\x0e\x28\xf8\xc2\xbf\xce\xce\x80\x3b\x8b\x62\x87\xa4\xc8\xde\xe6\xc0\xed\x5b\x4a\xbc\xe8\xcf\x60\x18\x93\x4f\xe5\xb7\x30\xf8\x3a\x02\x7f\x04\x83\xaf\xcf\x78\xc5\x20\xcd\x7c\x53\x83\x6f\xbb\xbf\x43\x81\x87\xc6\x98\x87\x0a\x77\xc1\x94\xa3\xf6\xa6\xc0\xae\xb5\x7a\xd8\x27\xc5\x2b\x4a\xd1\xba\x37\x45\x60\x7f\x55\xdb\x1d\x4b\x96\x8f\x86\xd2\x90\xf6\xa1\xec\x2e\x8a\x76\x95\xa9\x56\x5d\x59\x3d\xe6\xd9\x35\xa6\x28\xa0\x89\x92\x53\x1f\x51\x97\x6e\xb6\x7b\xc9\x3a\xf6\x36\x20\x5f\xa6\x0c\xf6\xa2\x11\xe4\x5a\x43\x94\xec\x07\xf5\x81\xaa\xd1\x59\x76\x8e\xbd\xd5\x7e\xea\x29\x99\x84\xda\x60\x33\x8a\x0f\x3b\xa8\x10\x83\x33\xbb\x17\x36\x39\xdb\xcf\x37\x76\xfb\x32\x29\x26\xea\xd3\xa7\x2a\x94\x6a\xf1\x04\xf3\x1a\x63\x0d\x8a\x35\x25\xc5\xc7\x76\xfc\x99\x07\x53\x66\xc6\x50\xe4\x98\x94\x8d\x77\x14\x80\xbb\xeb\xc6\x14\x0a\xc5\xc2\x26\x58\x8c\x72\x53\x79\xa8\x08\xd8\x3f\x7a\x63\x5e\x9b\xd6\xe1\x2b\x18\x2c\x0a\xd2\x5b\x3c\xea\xa4\xb6\xfd\x64\x7b\xc1\x84\xea\x30\x27\xfb\xf0\x7d\xea\x0c\x83\x61\xb0\xea\xc5\x7b\x9c\x44\x43\x34\x65\x21\xa6\x64\x01\x31\x86\xf5\xd8\xc9\xb7\x2b\xcd\x46\x14\xcd\x3b\xf3\x93\x0a\xeb\x92\xca\x82\xc1\xec\x2d\x6e\x8b\xc2\xb1\xbe\xb5\x7d\x54\x0f\xec\xa3\x1a\x74\x29\xa3\xa8\x6c\x54\xda\x6e\xb2\xf8\xcd\xb3\x68\x00\x3b\x30\x18\x44\xc7\xd9\xec\x59\xec\xef\x93\xc2\x97\xf6\x64\x9c\x7d\xc4\x65\xe1\x5d\x9b\xb0\x8e\x29\xfb\xa3\x61\x84\x5a\x2f\x95\x8c\xb8\x3a\x5b\x8f\xfa\xf3\xf4\xb3\x75\x03\xa8\x2e\xd5\x91\x6a\x87\x1f\x54\x78\x5f\x18\x67\x39\x8b\x98\xcd\x85\xd9\x83\x7a\x73\x0f\x3c\x42\x81\xe0\x3e\x95\x90\xb3\xa8\xa0\x4b\x75\x19\x4d\x89\xd8\xd7\x06\xeb\xf5\xa8\x04\xae\xb0\xf8\x50\x99\x96\x8a\x3b\xa5\x0a\x93\xfa\x43\xe6\xd9\x4f\xfc\x96\xf8\xe0\x13\x18\xd6\xa2\x3e\x75\x2c\xec\xe1\x5c\xd6\x2e\xef\xa3\x55\x48\xfc\xa3\xa2\x2c\xfe\xd0\x77\x56\x56\xad\x88\x1b\x58\x2d\x5d\xc4\x60\xb6\xf1\x5c\x3a\xa3\x56\xd4\x77\xa6\xa2\x54\x74\xaa\x10\xeb\x86\xde\x6c\xc6\xd7\x3e\x75\x2c\xf0\xd1\x37\x96\xaf\xbe\xb6\xd8\xa2\xd0\xe0\xc7\x1c\xb9\x0b\x47\x7c\xaa\xa0\xa8\x2a\x31\x81\xab\x28\x6d\xdb\xbf\xda\x59\x24\xdb\xb0\x85\x2e\x0e\xff\xc8\xe9\x12\x8c\x47\xb3\x05\x0d\xe0\x9e\x3a\xf1\x03\x3f\xcb\xc4\x73\xce\x85\xcb\x55\xca\x1d\xe2\x4e\x6e\x70\x27\x5d\x60\x93\x7a\x75\xb8\x82\x9d\x4b\x05\x8e\xd6\x7d\x2c\x1d\x08\xb9\xe4\xac\x83\xc0\x37\x14\x7d\x88\x96\x0b\xe0\x84\xee\x90\xff\x4b\xe5\x71\xa6\xf4\xc4\x91\x9c\x82\xbf\xcd\xad\x03\xe8\x8c\x33\x5d\x6b\xdf\xdd\xad\x53\xf2\xaf\xfc\x26\xbf\xfb\x60\x3a\xd8\x15\xaf\x5d\x91\x4b\x71\xeb\x52\xee\xa1\x23\x8b\x2e\x45\xd3\x0b\x6c\xa1\x63\x22\xa7\xa8\xf8\x70\x97\x6a\x36\x4c\x96\x27\xe4\x04\xba\x46\x6e\x11\x4b\x62\xc7\x7b\x35\x18\xa6\x60\xdb\x24\x9c\xe8\x6e\xc9\x75\xfc\x9e\xa2\xf9\x45\xec\xd0\x0f\x34\x06\xbb\x38\x17\xcc\x5d\xca\xd9\xa5\x7b\x8a\xc6\x33\xba\xd5\xd6\x99\xef\xe3\x1b\x7e\xd3\x25\x91\xab\x54\xd5\x36\xd9\x35\x24\x1c\xc0\xb8\x4d\x5d\x10\xda\x57\xbb\x2f\xbb\x5e\xf8\xc9\x59\xc4\x9f\x77\x9f\x3a\x29\xf2\x6d\xe1\x5a\x67\xfa\x41\xce\xb5\xa9\x06\x55\x89\xa3\xe4\x3e\xdd\x19\xdd\x5c\x51\xbe\x53\xa9\x93\xcf\xac\x5d\xb8\x1a\xdf\x54\xf4\xff\x05\x00\x00\xff\xff\x35\x49\xde\xea\x00\x10\x00\x00")

func bindata_go() ([]byte, error) {
	return bindata_read(
		_bindata_go,
		"bindata.go",
	)
}

var _migrate_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x4f\xe4\x38\x10\x3d\xc7\xbf\xa2\x36\xa7\x44\x6a\xe2\xcb\x9e\x7a\xc5\x61\xc5\x80\x84\x04\x1c\x7a\xd4\x9a\x23\x38\x49\xb5\x53\x43\x62\x67\xca\x0e\x2d\x84\xf8\xef\x23\xe7\xbb\x01\x8d\x60\x4e\x40\xca\xef\xa3\x9e\x9f\x69\x55\xf1\xa8\x34\x42\x43\x9a\x95\x27\x6b\x9c\x10\xd4\xb4\x96\x3d\x24\x22\x8a\x35\xf9\xaa\xcb\xb3\xc2\x36\x52\xdb\x5a\x19\x7d\x36\x1c\x44\x39\xfd\x7c\xfa\x37\x16\xd1\x3d\x7c\xea\xa4\x2c\x95\x57\xb9\x72\xf8\x17\x10\xd9\x5a\xe7\x35\xa3\xfb\x02\xd6\xd9\x8e\x0b\x94\x07\xaa\x83\x62\x4e\x26\x90\x7d\x0d\xab\xed\xfd\x88\x7b\xa7\x5b\x53\x2e\xdb\x5f\xb1\x48\x85\x90\x12\x6e\x07\xe8\xde\x21\xbb\x1d\xb6\x16\x54\xdb\xd6\x84\x0e\xa6\x05\x56\x11\x43\xe7\xc8\x68\xf0\x15\xc2\x83\xb6\x67\xa3\xc0\x03\x4c\x97\xa1\x5c\x3f\x1b\x2c\x40\xc9\xf4\x84\x9c\x05\x91\x6b\x0f\x05\xa3\xf2\xe8\x40\x2d\x7c\xd3\xc1\x85\x35\x27\xa3\xf8\xb9\x97\x06\x8d\x06\x83\xb3\x12\xf2\xe7\x41\x72\x31\x32\x4b\x6e\x40\x99\x32\x4c\x4d\x90\x59\x34\x0c\x1e\x47\x1d\x04\x32\xce\x2b\x53\x20\x1c\xc9\x57\xef\xcd\x9f\xb8\x9d\xe8\xa0\x65\xfb\x44\x25\x96\x4b\x0c\xfb\xdd\x4d\x06\xd7\x3e\xe8\x04\xbd\x39\x27\x65\x9e\xa1\x45\x53\x86\x1d\x56\x51\x79\xdb\xf3\xcc\xf0\x40\x5c\x5b\x3d\x24\xc4\xe8\xba\xda\x87\x68\x02\xdd\xde\x29\x8d\xdb\xf0\xdb\xd8\xe0\xf5\x6d\x75\x0e\xd9\xa8\x06\x25\x63\x6b\xe5\x22\x10\x03\x48\x09\xad\x0a\x2b\xd9\x55\x58\xcb\x6a\x03\x7b\x44\x07\x40\x66\x38\x9f\xad\x64\x6f\xaf\x3c\x59\x58\xb3\xff\x9d\x43\x7f\xa7\x1a\x74\x49\xba\x81\xb7\x83\xf4\xbf\x9e\xeb\x9f\x73\x30\x54\xc3\x4b\xa0\x8f\x6a\xab\x39\xbb\x52\x5e\xd5\x49\x9a\x5d\x32\x27\xc8\x9c\x66\xb7\x4e\x27\xf1\x41\x51\x8d\x65\xf0\x37\xdd\xc5\xfc\x90\xd2\x80\x7d\x1d\x03\xb8\xb2\x0c\x3b\x3c\x20\xa3\x29\x70\x0b\x95\xf7\xad\xdb\x4a\xb9\x4a\xc1\x11\xff\x54\x1a\x59\x7a\xee\x50\x75\xbe\x92\x79\x6d\x73\xd9\x28\xe7\x91\x65\xa3\xc8\x64\xda\x8a\x43\x67\x8a\x77\x85\x4e\xa6\x07\xb8\xdf\xdd\x80\xf3\x4c\x46\xa7\x10\x4c\x86\x55\x2c\xa7\xf0\x22\x22\x29\x57\xad\x5c\x95\x50\x44\xf3\xe7\xef\x43\x4d\xb6\xe7\x30\xc6\x9b\xed\x70\xa8\x4e\x72\x9a\xd9\x10\x94\x88\x86\xe1\xb7\xbe\x56\x9b\x3e\xb6\x15\xf6\x07\xf9\xea\x7a\xec\x65\xf2\x46\x23\x15\xd3\x9d\xcd\x39\x47\x11\xa3\xef\xd8\x84\xaf\x22\x7a\x15\x22\x2a\xf3\x31\xd2\x99\x7a\xfc\x3b\xbb\xc3\x63\x60\x1f\xb8\x66\x8d\x78\xe9\x45\xbc\x81\x53\x6f\xab\x80\x3e\xa1\x1d\x8d\x6d\x9a\x0c\x64\xfb\x36\xf9\x10\x26\x25\x5c\x54\x58\x3c\x02\x1d\xfa\xd2\xf7\x71\x03\x39\x88\x8d\x85\xa2\x52\x46\x63\x0c\xc7\x8a\x8a\x0a\xc8\x94\x54\xf4\x4f\xd7\x57\xca\x87\xd3\x8c\xa0\x18\xc1\xd8\x0f\xde\x56\x36\x90\xdf\x58\x0d\xca\x00\x99\x83\x85\x06\x5d\x78\x44\x40\x06\x7c\x45\x0e\x8a\xd0\x73\x11\xad\x5c\x4d\x6e\x2f\x99\xef\xec\x45\xaf\xde\xbb\x3c\xd9\x2e\xac\x17\xa8\x8d\x5d\xdc\x0e\x73\x2c\xc7\x35\xfe\x64\x6c\x00\x3b\x0b\xe4\xc3\x3f\x21\xd7\x15\x05\x3a\x07\x85\x35\x25\x85\x03\xc3\xbc\xb6\x1a\x9c\x6d\xd0\x57\x01\x1d\x18\xfb\x58\x47\x1f\x86\x6a\xf1\x2a\x7e\x07\x00\x00\xff\xff\x2b\x1e\x35\xcc\xdf\x06\x00\x00")

func migrate_go() ([]byte, error) {
	return bindata_read(
		_migrate_go,
		"migrate.go",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"000001_init_db.down.sql": _000001_init_db_down_sql,
	"000001_init_db.up.sql": _000001_init_db_up_sql,
	"000002_users.down.sql": _000002_users_down_sql,
	"000002_users.up.sql": _000002_users_up_sql,
	"bindata.go": bindata_go,
	"migrate.go": migrate_go,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"000001_init_db.down.sql": &_bintree_t{_000001_init_db_down_sql, map[string]*_bintree_t{
	}},
	"000001_init_db.up.sql": &_bintree_t{_000001_init_db_up_sql, map[string]*_bintree_t{
	}},
	"000002_users.down.sql": &_bintree_t{_000002_users_down_sql, map[string]*_bintree_t{
	}},
	"000002_users.up.sql": &_bintree_t{_000002_users_up_sql, map[string]*_bintree_t{
	}},
	"bindata.go": &_bintree_t{bindata_go, map[string]*_bintree_t{
	}},
	"migrate.go": &_bintree_t{migrate_go, map[string]*_bintree_t{
	}},
}}

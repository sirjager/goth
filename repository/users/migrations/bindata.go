package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var __000001_init_db_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd5\xe5\x72\x09\xf2\x0f\x50\x70\x0b\xf5\x73\x0e\xf1\xf4\xf7\x53\x48\xcb\x8b\x2f\x2d\x48\x49\x2c\x49\x8d\x2f\xc9\xcc\x4d\x2d\x2e\x49\xcc\x2d\xb0\xe6\x02\x04\x00\x00\xff\xff\x77\x3e\x8a\xb9\x26\x00\x00\x00")

func _000001_init_db_down_sql() ([]byte, error) {
	return bindata_read(
		__000001_init_db_down_sql,
		"000001_init_db.down.sql",
	)
}

var __000001_init_db_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcd\xc1\x8a\xb3\x40\x10\x04\xe0\xf3\xf4\x53\x14\xc1\x43\x12\xf8\xf3\x02\xc3\x7f\x70\xb5\x75\x1b\xb2\x3d\xcb\x4c\x87\xe4\x26\x82\xae\x04\x4c\xd6\x45\x7d\xff\x45\xb2\xc7\x82\xfa\xaa\x8a\xc8\xb9\x31\xf8\x66\xac\x49\x82\x42\x2a\x68\x30\xf0\x4d\x92\x25\xec\xd6\xf5\xde\xfd\xfb\x9e\xe7\x69\xe7\x89\xfe\xca\x21\x22\xf2\xe7\x39\x2f\x18\xd5\x45\x0b\xdb\xd8\xd7\xb3\x59\xa7\xae\x5d\xfa\x66\xb9\x3f\xfa\x79\x69\x1f\xd3\xfe\x40\x91\xed\x12\x35\xc1\xa2\xd4\x35\x47\xe4\x09\x59\x46\x6f\x5c\x8b\x92\x93\x0a\xe1\x5c\x9e\x8e\x90\x84\x52\x92\x89\x16\x86\x2a\x86\x0f\x28\x5f\x4f\x47\xd8\x3b\x2b\x39\xe7\xdc\x16\x5f\xe3\x5d\xd3\x2e\xf8\x0f\x0d\xd7\xfd\xc1\x83\x1c\x6b\x09\xa9\x3c\xb9\xd7\xd1\x06\x3d\xb1\x96\x9e\xb2\x0c\x63\xfb\x1c\xd6\x76\xe8\x31\x8d\xd3\x30\xff\x8c\xf0\xf4\x1b\x00\x00\xff\xff\x93\xbe\xf0\xf8\xee\x00\x00\x00")

func _000001_init_db_up_sql() ([]byte, error) {
	return bindata_read(
		__000001_init_db_up_sql,
		"000001_init_db.up.sql",
	)
}

var __000002_users_down_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x50\x2a\x2d\x4e\x2d\x2a\x56\xb2\xe6\x02\x04\x00\x00\xff\xff\xb3\x49\x9e\xd5\x1e\x00\x00\x00")

func _000002_users_down_sql() ([]byte, error) {
	return bindata_read(
		__000002_users_down_sql,
		"000002_users.down.sql",
	)
}

var __000002_users_up_sql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x5f\x6f\xda\x30\x14\xc5\xdf\xf3\x29\xae\xfc\xd2\x44\x42\x7d\x98\xd6\xa7\xaa\x0f\x21\x5c\x4a\xd4\xe0\x30\xd7\x1e\x74\x2f\x96\x47\x1c\x64\x2d\x7f\x90\xe3\x50\xed\xdb\x4f\x26\x50\xaa\x95\x8d\xf2\x9a\xfc\xee\x39\xf7\x1c\x5d\x27\x0c\x63\x8e\xc0\xe3\x71\x86\x40\xfa\x4e\xdb\x8e\x40\x18\x00\x10\x53\x10\x10\x22\x9d\xc0\x82\xa5\xf3\x98\xbd\xc0\x13\xbe\xc0\x04\xa7\xb1\xc8\x38\x84\x7d\x6f\x0a\xb9\xd1\x8d\xb6\xca\x69\xb9\xfb\x1a\x46\xd1\x28\xf0\x63\xba\x56\xa6\x22\xf0\x3d\x66\xc9\x2c\x66\xe1\x97\xbb\xbb\x08\x04\x4d\xbf\x09\x04\x9a\x73\xa0\x22\xcb\x46\x9e\xf3\x56\x8d\xaa\xf5\x27\xd0\xad\xea\xba\xd7\xd6\x16\x04\x38\xae\xf8\xdb\xbf\xb7\x65\x6e\x6e\x06\xeb\x9d\xb6\xa6\x34\xba\x20\x30\xce\xf3\xec\x23\x57\xaa\xaa\xd3\x7b\xc5\x9f\x55\xbb\xfe\x75\x11\xdc\x7b\xdb\x76\x67\x0a\x6d\xff\x5a\xf3\xec\x0e\x00\x64\xd3\xb6\x9b\x4a\x4b\xdf\xdd\x65\xde\x0f\x94\x7d\x55\xc9\x33\x3d\xfc\xcb\xa0\x34\xb6\x73\xd7\x0c\x54\xea\x0a\xde\x0f\xa8\x9d\x72\xca\xca\xde\x56\xff\xeb\xdb\x57\x63\xd6\xae\xb7\xfa\x12\xe9\xd1\x5a\x75\xce\x77\x78\xbe\xee\x69\x9c\x3d\xa3\x97\x4c\x66\x98\x3c\x41\x38\xd0\x90\x52\x08\x39\x13\x38\x1a\x80\xe3\x81\xad\xad\x56\x4e\x17\x52\x39\x02\x3c\x9d\xe3\x33\x8f\xe7\x0b\xfe\xe3\xa3\x6c\xd8\xb4\xaf\xfb\xb3\xf4\xd7\xb6\x2d\xae\x1a\x0a\xa2\xfb\x20\x08\x0e\x8f\x23\xa5\x13\x5c\x41\x4e\x4f\xef\xe3\xfd\x12\x9e\x3c\x80\x87\xe3\x1d\x78\xd2\x36\xd5\x6f\xd9\x36\x5a\x1e\xd3\xbf\x57\x18\xbe\x45\xb0\x9c\x21\x43\x38\x24\x7e\x00\x9f\xf7\xa4\xc7\x59\xfa\xf8\x88\x0c\x9c\xdd\xc8\x21\x81\x3c\x05\x81\x31\x4e\x73\x86\x20\x16\x13\xcf\x9e\xc4\x83\x69\xce\x00\xe3\x64\x06\x2c\x5f\x7a\x03\x0a\x61\x9e\x4d\x6e\x4d\x01\x0f\x40\x71\x79\x6b\x8a\x08\x70\x85\x89\xe0\x08\x53\x41\x13\x9e\xe6\x14\xca\xe6\x68\xe1\x4c\xad\x3b\xa7\xea\x6d\x18\xdd\x07\x7f\x02\x00\x00\xff\xff\x33\x18\x96\xce\x20\x04\x00\x00")

func _000002_users_up_sql() ([]byte, error) {
	return bindata_read(
		__000002_users_up_sql,
		"000002_users.up.sql",
	)
}

var _bindata_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x97\x5b\x8b\x24\xc7\x11\x85\x9f\xbb\x7e\x45\xb9\x41\xa6\x1b\x86\x71\xdd\x2f\x82\x7d\x91\xf0\xab\x1f\xfc\xea\x30\x4d\x66\x55\xe6\xd0\x78\xa7\x7b\xb6\x2f\x52\x68\x8d\xfe\xbb\xf9\x32\x72\x58\x69\xd9\x59\x8c\x56\x0b\xb5\x5d\x95\xd7\x88\x13\x27\x4e\xc4\xbc\xb8\xe5\x3f\xee\x29\x94\xcf\xc7\xa7\x8b\xbb\x1d\xcf\xa7\x6b\x51\x1c\x9f\x5f\xce\x97\x5b\xb9\x2b\x36\x5b\xff\xcb\x2d\x5c\xb7\xc5\x66\xbb\x9c\x9f\x5f\x2e\xe1\x7a\xfd\xdb\xd3\xc7\xe3\x0b\x03\xf1\xf9\xc6\xcf\xf1\xcc\xff\xd7\xdb\xe5\x78\x7a\xba\x6e\x8b\x7d\x51\xc4\xfb\x69\x29\xfd\xf1\xb4\xba\x9b\x3b\x5c\x82\x5b\x77\xbc\x95\xff\xfa\x37\x67\x3d\x94\x27\xf7\x1c\x4a\x5b\xbf\x2f\x77\xaf\xa3\xe1\x72\x39\x5f\xf6\xe5\x7f\x8b\xcd\xd3\xc7\xf4\x55\x7e\xff\xae\xe4\xaa\xc7\x7f\x84\x9f\xff\x19\xdc\x1a\x2e\xbb\x64\x0b\xdf\x3f\xdc\x63\x0c\x97\x74\xec\x7e\x5f\x6c\x8e\x31\x6d\xf8\xcb\xbb\xf2\x74\x7c\xcf\x11\x9b\x4b\xb8\xdd\x2f\x27\x3e\x1f\xca\xf8\x7c\x7b\xfc\x3b\xa7\xc7\xdd\x96\x83\xca\xef\x3e\x7c\x5f\x7e\xf7\xd3\xd6\x2c\x49\x77\xed\x8b\xcd\xaf\x45\xb1\xf9\xc9\x5d\x4a\x7f\x8f\xa5\xdd\x63\x97\x14\x9b\x83\x99\xf3\xae\x3c\x9e\x1f\x7f\x3c\xbf\xfc\xb2\xfb\xab\xbf\xc7\x87\xf2\xe9\xe3\x1e\x5b\x1f\x7f\x7c\x7f\xbe\x86\xdd\xbe\xf8\xf3\xcc\xc8\xbb\xfc\x3d\x3e\xfe\x80\x25\xbb\xfd\x03\x47\x14\xbf\x16\x05\x16\x1e\x0e\x15\xff\xea\xc3\xf1\x74\xbc\x1d\x56\x7f\x58\xcf\x3f\x9f\x0e\xd7\x0f\xef\xcb\x77\x19\xe3\xdd\x56\xb4\x8e\xa2\x93\x17\xad\x26\xd1\xaa\xfa\xf2\x13\xa3\xe8\xda\x88\xae\xbd\x68\xe8\x45\xc7\x46\xb4\x9a\x45\x23\xbf\x51\xb4\xaf\x44\x47\xd6\x7a\xd1\xc8\x7c\x2b\x5a\x05\xd1\x58\x8b\xc6\x4e\x34\x8e\xa2\x7d\x2b\xda\x4d\xa2\x8b\xb7\xfb\x9a\x28\xda\xac\x36\xd6\xcd\xa2\xcd\x62\xbf\xd3\x6a\x73\xcb\x2c\xba\x30\xb6\xda\xba\x26\xd8\x3c\x63\x7c\xfb\x4a\x34\x0c\xa2\x15\x36\x74\xbf\xb7\x95\x67\x1c\x45\xdb\x20\x3a\x39\x51\xcf\xf9\xc3\x6f\x7d\xda\xbe\xd2\xef\x2d\x8c\x76\x5f\xa4\xdc\x2b\xe2\xbf\xe5\x6c\xb1\xd9\xbc\x89\xf4\x43\xb1\xd9\x6c\x7f\x3f\xf7\xc8\xdc\xe3\xf5\xc3\xfb\xed\x43\xb1\xd9\xbf\x19\xab\xfb\xcb\x1f\x8e\x14\x48\x2e\xab\xe8\x52\x67\xef\x41\xbe\x12\xad\x2b\x43\x2a\xb0\xae\xb5\xc8\x10\x95\xba\xb3\xb5\x1d\xef\x8d\x68\x9c\x6c\x1e\x64\x97\x56\x74\x8c\x16\x5d\x4f\x64\x7b\xd1\xda\x8b\xfa\x46\xb4\x5d\x2d\x9a\xdd\x22\x3a\x8d\xa2\xa1\x33\x94\xa7\x46\xd4\x05\xbb\x8b\xb9\x75\x10\xed\xd8\xbb\x9a\x7d\xbc\xb3\x7f\x19\x6d\x6d\x74\xa2\xce\x99\xad\xcb\x64\xd1\x6a\x6b\xb3\x63\x18\x44\xdd\x2b\x33\x1a\xd1\xae\x11\x6d\x9c\xe8\x30\x89\xb6\xf8\x51\x19\x43\x66\xc6\x61\x67\xbe\x0f\x16\xae\x30\x90\x3b\xbd\xe8\x1c\x44\xc3\x28\x3a\xcc\xf6\x3b\xc1\xde\x20\xba\x38\xd1\xa6\x16\x6d\x1a\x63\x33\x73\xed\x6c\x0c\xac\x27\x63\x3c\xf6\xc2\xec\x95\x87\xb1\xd1\x30\xed\x67\x51\x37\x9a\xaf\xfd\x6a\x7e\x60\x6f\xb2\x3f\xda\xf7\x38\xdb\x9d\xc4\x6e\x6d\xed\x4e\x62\x31\xd7\xa2\x61\x35\xbc\xdb\xde\xf0\x77\x64\x58\x67\xdf\x5d\xc6\x93\x2c\xe3\x9e\x6e\x10\x1d\xc8\xb4\xc5\x38\x80\xbf\x33\x31\x72\xa2\xa1\xb6\x71\x7c\x9c\x82\xe8\x5c\x89\x4e\xc4\xb6\xb1\x75\xf8\x5a\x13\x97\xc1\xb0\xe3\x97\xac\x6d\x26\xd1\x9e\x78\x44\xbb\x0f\xdf\x5a\x32\xd3\x1b\x06\x60\xb1\x2e\xb6\x97\x75\xa1\x35\x3f\xf1\x83\x6c\x24\x3e\x9c\x53\xad\x86\x49\x7c\xe5\x1c\x3c\x5a\x44\x07\x6f\xf6\x3b\xf0\x58\x0c\x17\xd6\xad\xb5\x68\x35\x18\x7f\x7c\x2d\x3a\x0f\x66\x3b\x9c\xa8\xd8\xd7\x5a\xcc\xea\x1c\xcb\x71\x10\x0d\x93\x71\x62\xca\xf7\xb7\x99\xeb\xd3\x62\x1c\x80\xcb\xf0\xf2\x73\x15\x00\x23\x1f\xf2\x9a\x49\x34\x84\xff\x4b\x05\x2c\xfb\xbe\x4d\x03\xec\x8c\x2f\x29\xc0\xfd\xe5\xad\xfc\x6f\x0e\xf7\x6b\xb8\x5c\xbf\x4d\xa9\xbf\xa4\xce\xec\x19\x6b\xd1\xb1\xb3\x71\xde\xfb\xde\x70\x19\xb3\x0e\x90\xe3\xe0\xcb\x18\x71\x40\xc1\x13\xff\x06\x3b\x03\xee\x24\xc5\x0e\x59\x91\x9d\xcd\x11\xb7\xaf\x29\x71\xd2\x9f\xd9\x62\x4c\x3e\xd5\x5f\x8b\xc1\xe7\x08\xfc\x91\x18\x7c\x7e\xc6\xa7\x18\xe4\x99\xaf\x6a\xf0\xeb\xee\x6f\x50\xe0\xb9\x33\xe6\x91\x35\x64\xed\xea\x8c\xb1\x49\x69\x51\xa6\x68\x0a\xdb\xcc\xa6\x1e\x71\xb1\xfa\xda\x75\xa6\x70\x28\xe5\x3c\x19\xfb\x93\xc2\xb8\x9c\xb1\x39\xd3\x3b\x67\x4a\x81\x92\x73\x2e\x59\x05\xaa\x44\x12\xe5\x22\xa3\xc8\xe8\x94\x85\x9d\x45\x0b\x15\x47\x19\x52\x16\x57\xa6\x3e\x28\x1a\xd9\xdf\xe4\x08\x73\xcf\xdc\x67\x16\xa0\x1e\xce\x6c\x23\x6b\x50\x84\x98\xcf\x44\x05\x9a\xf1\x53\xb6\xa2\x3a\x4b\x3e\x1b\x66\xa1\x30\xa8\x1c\x0a\x08\x5b\xb8\x67\xca\xca\x57\x67\xec\xa8\x46\xa9\xfa\xe4\x77\x14\x78\x5e\xed\x9c\x54\x41\x7a\xc3\x08\x1c\x7c\x1e\xaf\x73\x36\x2f\xb9\x92\x81\x0d\x0a\x42\xd5\x68\x27\x53\x3d\xb0\x03\xf3\x2a\xd7\xfd\x35\xab\x86\x1f\x4c\xed\x51\x63\xc6\x93\xc2\x38\x53\x56\xd6\xa0\x86\x30\x1f\x7f\x7c\x66\xb6\x1b\x72\x65\xa8\x4c\xad\x50\xf7\x25\xf7\x2a\xbc\xa3\xbc\x33\x36\x78\x7b\x12\x2f\x3a\xab\x48\x3e\x5a\xf6\xf0\x0d\x8e\xf4\x44\x2e\xfb\x99\xaa\x66\x56\x3d\x7c\xe4\x2e\x6c\x04\x7f\x2a\x17\xd8\xae\xc4\x63\x15\x0d\xce\xec\x49\xca\x39\x98\x1a\x73\x26\xfe\xba\xac\xc2\xe0\xcb\x7d\x9e\x0a\xd7\x8b\x0e\xc1\x1e\x54\x36\x78\xc3\xd5\x67\x7f\xda\xce\xce\x6b\x32\x77\x96\x6c\x03\x95\xb3\xc1\x96\xcc\x37\x1e\x94\x76\xf4\xc6\xd9\x39\x9a\x62\xe0\x27\x55\x2c\x75\x02\xb5\x55\x88\x31\x57\x47\x94\x7a\x18\x0d\xfb\x21\x57\xfb\xde\x7d\x3a\xbf\xca\x99\x0f\x27\x39\x1b\x9b\x66\x6f\x7c\xee\xbc\xe5\xc5\xba\x9a\x0f\x54\xef\x2a\xe7\x12\x31\xe5\x6e\xb0\x6f\x5b\x8b\x05\xbc\x04\x47\x30\x4d\x3e\x0d\x86\xf1\x9a\x79\xd9\x77\x86\x1d\xb6\xbc\x9e\xe5\x26\xc3\x02\x85\x84\x0b\x4b\x9e\x03\x7f\x6c\x0d\xd9\x0f\x30\x80\x07\x29\xff\x82\xe1\x0a\x97\xa9\xd6\x21\x73\x0a\xbf\xc0\x00\xfc\xe8\x35\xc7\xc9\xb8\x49\xae\xc0\xb1\x79\x31\x3b\x5d\x6b\x1c\xe9\x32\x67\xe0\x33\xd5\xb0\xab\x2d\x86\xc4\x99\xbc\xa4\x5a\xc3\x1f\xf2\x0c\x9e\x33\x07\x3f\xa7\x9c\x57\x53\x6d\x7c\xe0\xc1\x5e\xf2\xaa\x1e\x6d\x1f\x7b\x50\x5f\xce\xc5\x3f\xd6\x83\xd3\x14\xad\x8a\x57\x39\x66\x8c\x63\xcf\xb0\x58\xb5\xf7\xe4\x50\xb4\x5c\xf0\xb9\x23\x4c\xdd\xcd\x60\x9a\x81\xef\x75\xc6\x90\xee\x84\x75\x4d\xae\x26\xc4\x92\xf3\xe1\x0c\xb9\x8a\xcd\x7d\xf6\x0b\xdb\xd0\x95\x90\xbb\x86\x98\x3b\x1d\xf8\x8e\x8d\xf8\x94\x3a\x46\xf2\x7f\x35\xec\xd0\xbf\x76\xb0\x0a\x91\x34\x73\xb6\x6f\x70\x46\xdb\x12\x5f\xa2\xc5\xa6\xce\x58\xa7\x4e\xb2\x32\xac\x9b\xdc\xc1\x82\x5b\x03\x67\x32\xd7\xe0\x2d\xba\xe5\x3a\xeb\x38\xe9\xa6\x88\x25\x79\x33\x4d\xc6\x15\xf6\xc3\x3b\x74\x84\x73\xc0\x1a\x3b\xab\x3e\xbf\x67\x9f\xe0\x57\xea\xa2\x2a\xcb\x43\x7c\x5e\xa2\xf9\xb5\x74\xd6\xf9\x10\xfb\x25\xdf\x8d\x7f\x70\x9d\x3c\x44\x33\xa8\x07\x23\x78\xe6\xce\x6d\xa8\x6d\x2f\x7a\x31\xe4\xdf\xaa\x36\xae\xa2\x95\xa9\x62\xcf\xd6\x49\xd1\x1d\xa7\x2a\x0e\x76\xbd\x75\x75\x21\xc7\x22\xfd\x6d\x55\x9b\x3d\xa9\xd3\x1d\x72\xad\x71\xf6\x4e\xb7\x8c\x56\xc1\x41\xf8\x43\x97\x87\x76\x86\x9c\xa7\xa9\xd3\xe5\xee\xd1\xea\x44\xaa\xe4\x9f\x55\xf1\xf6\x7f\x01\x00\x00\xff\xff\xdb\x06\x1b\x6c\x00\x10\x00\x00")

func bindata_go() ([]byte, error) {
	return bindata_read(
		_bindata_go,
		"bindata.go",
	)
}

var _migrate_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x4d\x4f\xe4\x38\x10\x3d\xc7\xbf\xa2\x36\xa7\x44\x6a\xe2\xcb\x9e\x7a\xc5\x61\xc5\x80\x84\x04\x1c\x7a\xd4\x9a\x23\x38\x49\xb5\x53\x43\x62\x67\xca\x0e\x2d\x84\xf8\xef\x23\xe7\xbb\x01\x8d\x60\x4e\x40\xca\xef\xa3\x9e\x9f\x69\x55\xf1\xa8\x34\x42\x43\x9a\x95\x27\x6b\x9c\x10\xd4\xb4\x96\x3d\x24\x22\x8a\x35\xf9\xaa\xcb\xb3\xc2\x36\x52\xdb\x5a\x19\x7d\x36\x1c\x44\x39\xfd\x7c\xfa\x37\x16\xd1\x3d\x7c\xea\xa4\x2c\x95\x57\xb9\x72\xf8\x17\x10\xd9\x5a\xe7\x35\xa3\xfb\x02\xd6\xd9\x8e\x0b\x94\x07\xaa\x83\x62\x4e\x26\x90\x7d\x0d\xab\xed\xfd\x88\x7b\xa7\x5b\x53\x2e\xdb\x5f\xb1\x48\x85\x90\x12\x6e\x07\xe8\xde\x21\xbb\x1d\xb6\x16\x54\xdb\xd6\x84\x0e\xa6\x05\x56\x11\x43\xe7\xc8\x68\xf0\x15\xc2\x83\xb6\x67\xa3\xc0\x03\x4c\x97\xa1\x5c\x3f\x1b\x2c\x40\xc9\xf4\x84\x9c\x05\x91\x6b\x0f\x05\xa3\xf2\xe8\x40\x2d\x7c\xd3\xc1\x85\x35\x27\xa3\xf8\xb9\x97\x06\x8d\x06\x83\xb3\x12\xf2\xe7\x41\x72\x31\x32\x4b\x6e\x40\x99\x32\x4c\x4d\x90\x59\x34\x0c\x1e\x47\x1d\x04\x32\xce\x2b\x53\x20\x1c\xc9\x57\xef\xcd\x9f\xb8\x9d\xe8\xa0\x65\xfb\x44\x25\x96\x4b\x0c\xfb\xdd\x4d\x06\xd7\x3e\xe8\x04\xbd\x39\x27\x65\x9e\xa1\x45\x53\x86\x1d\x56\x51\x79\xdb\xf3\xcc\xf0\x40\x5c\x5b\x3d\x24\xc4\xe8\xba\xda\x87\x68\x02\xdd\xde\x29\x8d\xdb\xf0\xdb\xd8\xe0\xf5\x6d\x75\x0e\xd9\xa8\x06\x25\x63\x6b\xe5\x22\x10\x03\x48\x09\xad\x0a\x2b\xd9\x55\x58\xcb\x6a\x03\x7b\x44\x07\x40\x66\x38\x9f\xad\x64\x6f\xaf\x3c\x59\x58\xb3\xff\x9d\x43\x7f\xa7\x1a\x74\x49\xba\x81\xb7\x83\xf4\xbf\x9e\xeb\x9f\x73\x30\x54\xc3\x4b\xa0\x8f\x6a\xab\x39\xbb\x52\x5e\xd5\x49\x9a\x5d\x32\x27\xc8\x9c\x66\xb7\x4e\x27\xf1\x41\x51\x8d\x65\xf0\x37\xdd\xc5\xfc\x90\xd2\x80\x7d\x1d\x03\xb8\xb2\x0c\x3b\x3c\x20\xa3\x29\x70\x0b\x95\xf7\xad\xdb\x4a\xb9\x4a\xc1\x11\xff\x54\x1a\x59\x7a\xee\x50\x75\xbe\x92\x79\x6d\x73\xd9\x28\xe7\x91\x65\xa3\xc8\x64\xda\x8a\x43\x67\x8a\x77\x85\x4e\xa6\x07\xb8\xdf\xdd\x80\xf3\x4c\x46\xa7\x10\x4c\x86\x55\x2c\xa7\xf0\x22\x22\x29\x57\xad\x5c\x95\x50\x44\xf3\xe7\xef\x43\x4d\xb6\xe7\x30\xc6\x9b\xed\x70\xa8\x4e\x72\x9a\xd9\x10\x94\x88\x86\xe1\xb7\xbe\x56\x9b\x3e\xb6\x15\xf6\x07\xf9\xea\x7a\xec\x65\xf2\x46\x23\x15\xd3\x9d\xcd\x39\x47\x11\xa3\xef\xd8\x84\xaf\x22\x7a\x15\x22\x2a\xf3\x31\xd2\x99\x7a\xfc\x3b\xbb\xc3\x63\x60\x1f\xb8\x66\x8d\x78\xe9\x45\xbc\x81\x53\x6f\xab\x80\x3e\xa1\x1d\x8d\x6d\x9a\x0c\x64\xfb\x36\xf9\x10\x26\x25\x5c\x54\x58\x3c\x02\x1d\xfa\xd2\xf7\x71\x03\x39\x88\x8d\x85\xa2\x52\x46\x63\x0c\xc7\x8a\x8a\x0a\xc8\x94\x54\xf4\x4f\xd7\x57\xca\x87\xd3\x8c\xa0\x18\xc1\xd8\x0f\xde\x56\x36\x90\xdf\x58\x0d\xca\x00\x99\x83\x85\x06\x5d\x78\x44\x40\x06\x7c\x45\x0e\x8a\xd0\x73\x11\xad\x5c\x4d\x6e\x2f\x99\xef\xec\x45\xaf\xde\xbb\x3c\xd9\x2e\xac\x17\xa8\x8d\x5d\xdc\x0e\x73\x2c\xc7\x35\xfe\x64\x6c\x00\x3b\x0b\xe4\xc3\x3f\x21\xd7\x15\x05\x3a\x07\x85\x35\x25\x85\x03\xc3\xbc\xb6\x1a\x9c\x6d\xd0\x57\x01\x1d\x18\xfb\x58\x47\x1f\x86\x6a\xf1\x2a\x7e\x07\x00\x00\xff\xff\x2b\x1e\x35\xcc\xdf\x06\x00\x00")

func migrate_go() ([]byte, error) {
	return bindata_read(
		_migrate_go,
		"migrate.go",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"000001_init_db.down.sql": _000001_init_db_down_sql,
	"000001_init_db.up.sql": _000001_init_db_up_sql,
	"000002_users.down.sql": _000002_users_down_sql,
	"000002_users.up.sql": _000002_users_up_sql,
	"bindata.go": bindata_go,
	"migrate.go": migrate_go,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"000001_init_db.down.sql": &_bintree_t{_000001_init_db_down_sql, map[string]*_bintree_t{
	}},
	"000001_init_db.up.sql": &_bintree_t{_000001_init_db_up_sql, map[string]*_bintree_t{
	}},
	"000002_users.down.sql": &_bintree_t{_000002_users_down_sql, map[string]*_bintree_t{
	}},
	"000002_users.up.sql": &_bintree_t{_000002_users_up_sql, map[string]*_bintree_t{
	}},
	"bindata.go": &_bintree_t{bindata_go, map[string]*_bintree_t{
	}},
	"migrate.go": &_bintree_t{migrate_go, map[string]*_bintree_t{
	}},
}}

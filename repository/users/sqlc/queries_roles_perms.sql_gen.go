// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: queries_roles_perms.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const rolePermissions = `-- name: RolePermissions :many
SELECT   FROM "roles_permissions" rp
JOIN "permissions" r ON rp.permission_id = r.id 
WHERE rp.role_id = $1
`

type RolePermissionsRow struct {
}

func (q *Queries) RolePermissions(ctx context.Context, roleID uuid.UUID) ([]RolePermissionsRow, error) {
	rows, err := q.db.Query(ctx, rolePermissions, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []RolePermissionsRow{}
	for rows.Next() {
		var i RolePermissionsRow
		if err := rows.Scan(); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userPermissions = `-- name: UserPermissions :many
SELECT p.id, p.name, p.description, p.created_by, p.updated_by, p.created_at, p.updated_at
FROM "users_roles" ur
JOIN "roles_permissions" rp ON ur.role_id = rp.role_id
JOIN "permissions" p ON rp.permission_id = p.id
WHERE ur.user_id = $1
`

func (q *Queries) UserPermissions(ctx context.Context, userID uuid.UUID) ([]Permission, error) {
	rows, err := q.db.Query(ctx, userPermissions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Permission{}
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const userReadMaster = `-- name: UserReadMaster :one
SELECT id, email, verified, blocked, provider, google_id, name, first_name, last_name, nick_name, avatar_url, picture_url, location, roles, master, created_at, updated_at FROM "users" where master = true LIMIT 1
`

func (q *Queries) UserReadMaster(ctx context.Context) (User, error) {
	row := q.db.QueryRow(ctx, userReadMaster)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Verified,
		&i.Blocked,
		&i.Provider,
		&i.GoogleID,
		&i.Name,
		&i.FirstName,
		&i.LastName,
		&i.NickName,
		&i.AvatarUrl,
		&i.PictureUrl,
		&i.Location,
		&i.Roles,
		&i.Master,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const userRoles = `-- name: UserRoles :many
SELECT  r.id, r.name, r.description, r.created_by, r.updated_by, r.created_at, r.updated_at FROM "users_roles" ur
JOIN "roles" r ON ur.role_id = r.id 
WHERE ur.user_id = $1
`

func (q *Queries) UserRoles(ctx context.Context, userID uuid.UUID) ([]Role, error) {
	rows, err := q.db.Query(ctx, userRoles, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedBy,
			&i.UpdatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

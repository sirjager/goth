// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sirjager/goth/repository (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -package mockRepo -destination repository/mock/repository.go github.com/sirjager/goth/repository Repository
//

// Package mockRepo is a generated GoMock package.
package mockRepo

import (
	context "context"
	reflect "reflect"

	entity "github.com/sirjager/goth/entity"
	users "github.com/sirjager/goth/repository/users"
	vo "github.com/sirjager/goth/vo"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// UserCreate mocks base method.
func (m *MockRepository) UserCreate(arg0 context.Context, arg1 *entity.User) users.UserReadResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreate", arg0, arg1)
	ret0, _ := ret[0].(users.UserReadResult)
	return ret0
}

// UserCreate indicates an expected call of UserCreate.
func (mr *MockRepositoryMockRecorder) UserCreate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockRepository)(nil).UserCreate), arg0, arg1)
}

// UserDelete mocks base method.
func (m *MockRepository) UserDelete(arg0 context.Context, arg1 *vo.ID) users.UserDeleteResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDelete", arg0, arg1)
	ret0, _ := ret[0].(users.UserDeleteResult)
	return ret0
}

// UserDelete indicates an expected call of UserDelete.
func (mr *MockRepositoryMockRecorder) UserDelete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDelete", reflect.TypeOf((*MockRepository)(nil).UserDelete), arg0, arg1)
}

// UserGetAll mocks base method.
func (m *MockRepository) UserGetAll(arg0 context.Context, arg1, arg2 int) users.UsersReadResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetAll", arg0, arg1, arg2)
	ret0, _ := ret[0].(users.UsersReadResult)
	return ret0
}

// UserGetAll indicates an expected call of UserGetAll.
func (mr *MockRepositoryMockRecorder) UserGetAll(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetAll", reflect.TypeOf((*MockRepository)(nil).UserGetAll), arg0, arg1, arg2)
}

// UserGetByEmail mocks base method.
func (m *MockRepository) UserGetByEmail(arg0 context.Context, arg1 *vo.Email) users.UserReadResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetByEmail", arg0, arg1)
	ret0, _ := ret[0].(users.UserReadResult)
	return ret0
}

// UserGetByEmail indicates an expected call of UserGetByEmail.
func (mr *MockRepositoryMockRecorder) UserGetByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetByEmail", reflect.TypeOf((*MockRepository)(nil).UserGetByEmail), arg0, arg1)
}

// UserGetByID mocks base method.
func (m *MockRepository) UserGetByID(arg0 context.Context, arg1 *vo.ID) users.UserReadResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetByID", arg0, arg1)
	ret0, _ := ret[0].(users.UserReadResult)
	return ret0
}

// UserGetByID indicates an expected call of UserGetByID.
func (mr *MockRepositoryMockRecorder) UserGetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetByID", reflect.TypeOf((*MockRepository)(nil).UserGetByID), arg0, arg1)
}

// UserGetByUsername mocks base method.
func (m *MockRepository) UserGetByUsername(arg0 context.Context, arg1 *vo.Username) users.UserReadResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetByUsername", arg0, arg1)
	ret0, _ := ret[0].(users.UserReadResult)
	return ret0
}

// UserGetByUsername indicates an expected call of UserGetByUsername.
func (mr *MockRepositoryMockRecorder) UserGetByUsername(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetByUsername", reflect.TypeOf((*MockRepository)(nil).UserGetByUsername), arg0, arg1)
}

// UserGetMaster mocks base method.
func (m *MockRepository) UserGetMaster(arg0 context.Context) users.UserReadResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetMaster", arg0)
	ret0, _ := ret[0].(users.UserReadResult)
	return ret0
}

// UserGetMaster indicates an expected call of UserGetMaster.
func (mr *MockRepositoryMockRecorder) UserGetMaster(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetMaster", reflect.TypeOf((*MockRepository)(nil).UserGetMaster), arg0)
}

// UserUpdate mocks base method.
func (m *MockRepository) UserUpdate(arg0 context.Context, arg1 *entity.User) users.UserReadResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdate", arg0, arg1)
	ret0, _ := ret[0].(users.UserReadResult)
	return ret0
}

// UserUpdate indicates an expected call of UserUpdate.
func (mr *MockRepositoryMockRecorder) UserUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdate", reflect.TypeOf((*MockRepository)(nil).UserUpdate), arg0, arg1)
}

// UserUpdateVerified mocks base method.
func (m *MockRepository) UserUpdateVerified(arg0 context.Context, arg1 *vo.ID, arg2 bool) users.UserReadResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdateVerified", arg0, arg1, arg2)
	ret0, _ := ret[0].(users.UserReadResult)
	return ret0
}

// UserUpdateVerified indicates an expected call of UserUpdateVerified.
func (mr *MockRepositoryMockRecorder) UserUpdateVerified(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdateVerified", reflect.TypeOf((*MockRepository)(nil).UserUpdateVerified), arg0, arg1, arg2)
}

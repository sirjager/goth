// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sirjager/goth/repository (interfaces: Repo)
//
// Generated by this command:
//
//	mockgen -package mockRepo -destination repository/mock/repository.go github.com/sirjager/goth/repository Repo
//

// Package mockRepo is a generated GoMock package.
package mockRepo

import (
	context "context"
	reflect "reflect"

	entity "github.com/sirjager/goth/entity"
	users "github.com/sirjager/goth/repository/users"
	vo "github.com/sirjager/goth/vo"
	gomock "go.uber.org/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// UserCreate mocks base method.
func (m *MockRepo) UserCreate(arg0 context.Context, arg1 *entity.User) users.UserReadResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserCreate", arg0, arg1)
	ret0, _ := ret[0].(users.UserReadResult)
	return ret0
}

// UserCreate indicates an expected call of UserCreate.
func (mr *MockRepoMockRecorder) UserCreate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserCreate", reflect.TypeOf((*MockRepo)(nil).UserCreate), arg0, arg1)
}

// UserDelete mocks base method.
func (m *MockRepo) UserDelete(arg0 context.Context, arg1 *vo.ID) users.UserDeleteResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDelete", arg0, arg1)
	ret0, _ := ret[0].(users.UserDeleteResult)
	return ret0
}

// UserDelete indicates an expected call of UserDelete.
func (mr *MockRepoMockRecorder) UserDelete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDelete", reflect.TypeOf((*MockRepo)(nil).UserDelete), arg0, arg1)
}

// UserDeleteTx mocks base method.
func (m *MockRepo) UserDeleteTx(arg0 context.Context, arg1 users.UserDeleteTxParams) users.UserDeleteResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleteTx", arg0, arg1)
	ret0, _ := ret[0].(users.UserDeleteResult)
	return ret0
}

// UserDeleteTx indicates an expected call of UserDeleteTx.
func (mr *MockRepoMockRecorder) UserDeleteTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleteTx", reflect.TypeOf((*MockRepo)(nil).UserDeleteTx), arg0, arg1)
}

// UserGetAll mocks base method.
func (m *MockRepo) UserGetAll(arg0 context.Context, arg1, arg2 int) users.UsersReadResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetAll", arg0, arg1, arg2)
	ret0, _ := ret[0].(users.UsersReadResult)
	return ret0
}

// UserGetAll indicates an expected call of UserGetAll.
func (mr *MockRepoMockRecorder) UserGetAll(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetAll", reflect.TypeOf((*MockRepo)(nil).UserGetAll), arg0, arg1, arg2)
}

// UserGetByEmail mocks base method.
func (m *MockRepo) UserGetByEmail(arg0 context.Context, arg1 *vo.Email) users.UserReadResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetByEmail", arg0, arg1)
	ret0, _ := ret[0].(users.UserReadResult)
	return ret0
}

// UserGetByEmail indicates an expected call of UserGetByEmail.
func (mr *MockRepoMockRecorder) UserGetByEmail(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetByEmail", reflect.TypeOf((*MockRepo)(nil).UserGetByEmail), arg0, arg1)
}

// UserGetByID mocks base method.
func (m *MockRepo) UserGetByID(arg0 context.Context, arg1 *vo.ID) users.UserReadResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetByID", arg0, arg1)
	ret0, _ := ret[0].(users.UserReadResult)
	return ret0
}

// UserGetByID indicates an expected call of UserGetByID.
func (mr *MockRepoMockRecorder) UserGetByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetByID", reflect.TypeOf((*MockRepo)(nil).UserGetByID), arg0, arg1)
}

// UserGetByUsername mocks base method.
func (m *MockRepo) UserGetByUsername(arg0 context.Context, arg1 *vo.Username) users.UserReadResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetByUsername", arg0, arg1)
	ret0, _ := ret[0].(users.UserReadResult)
	return ret0
}

// UserGetByUsername indicates an expected call of UserGetByUsername.
func (mr *MockRepoMockRecorder) UserGetByUsername(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetByUsername", reflect.TypeOf((*MockRepo)(nil).UserGetByUsername), arg0, arg1)
}

// UserGetMaster mocks base method.
func (m *MockRepo) UserGetMaster(arg0 context.Context) users.UserReadResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserGetMaster", arg0)
	ret0, _ := ret[0].(users.UserReadResult)
	return ret0
}

// UserGetMaster indicates an expected call of UserGetMaster.
func (mr *MockRepoMockRecorder) UserGetMaster(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGetMaster", reflect.TypeOf((*MockRepo)(nil).UserGetMaster), arg0)
}

// UserUpdate mocks base method.
func (m *MockRepo) UserUpdate(arg0 context.Context, arg1 *entity.User) users.UserReadResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdate", arg0, arg1)
	ret0, _ := ret[0].(users.UserReadResult)
	return ret0
}

// UserUpdate indicates an expected call of UserUpdate.
func (mr *MockRepoMockRecorder) UserUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdate", reflect.TypeOf((*MockRepo)(nil).UserUpdate), arg0, arg1)
}

// UserUpdatePassword mocks base method.
func (m *MockRepo) UserUpdatePassword(arg0 context.Context, arg1 *vo.ID, arg2 *vo.HashedPassword) users.UserReadResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdatePassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(users.UserReadResult)
	return ret0
}

// UserUpdatePassword indicates an expected call of UserUpdatePassword.
func (mr *MockRepoMockRecorder) UserUpdatePassword(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdatePassword", reflect.TypeOf((*MockRepo)(nil).UserUpdatePassword), arg0, arg1, arg2)
}

// UserUpdatePasswordTx mocks base method.
func (m *MockRepo) UserUpdatePasswordTx(arg0 context.Context, arg1 users.UserUpdatePasswordTxParams) users.UserReadResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdatePasswordTx", arg0, arg1)
	ret0, _ := ret[0].(users.UserReadResult)
	return ret0
}

// UserUpdatePasswordTx indicates an expected call of UserUpdatePasswordTx.
func (mr *MockRepoMockRecorder) UserUpdatePasswordTx(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdatePasswordTx", reflect.TypeOf((*MockRepo)(nil).UserUpdatePasswordTx), arg0, arg1)
}

// UserUpdateVerified mocks base method.
func (m *MockRepo) UserUpdateVerified(arg0 context.Context, arg1 *vo.ID, arg2 bool) users.UserReadResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserUpdateVerified", arg0, arg1, arg2)
	ret0, _ := ret[0].(users.UserReadResult)
	return ret0
}

// UserUpdateVerified indicates an expected call of UserUpdateVerified.
func (mr *MockRepoMockRecorder) UserUpdateVerified(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserUpdateVerified", reflect.TypeOf((*MockRepo)(nil).UserUpdateVerified), arg0, arg1, arg2)
}
